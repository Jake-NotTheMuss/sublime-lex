%YAML 1.2
---
# Copyright (c) 2018-2022, John Gardner

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

# Flex-flavoured regular expressions
# Rewrite of https://github.com/Alhadis/language-grammars/blob/master/grammars/lex-regexp.cson
# for sublime-syntax
# http://www.sublimetext.com/docs/3/syntax.html

scope: source.lex.regexp
hidden: true

contexts:
  main:
    - include: wildcard
    - include: alternation
    - include: lookahead
    - include: anchors
    - include: start-condition
    - include: quantifier
    - include: string
    - include: expansion
    - include: quantifier-range
    - include: class
    - include: subpattern
    - include: escapes

  # Alternation
  alternation:
    - match: \|
      scope: keyword.operator.logical.or.lex

  # Zero-width assertions
  anchors:
    - match: \^
      scope: keyword.control.anchor.line-start.lex
    - match: \$
      scope: keyword.control.anchor.line-end.lex
    - match: (<<)EOF(>>)
      scope: keyword.control.anchor.eof.lex
      captures:
        1: punctuation.definition.angle.bracket.begin.lex
        2: punctuation.definition.angle.bracket.end.lex

  # Character class: [^xyz]
  class:
    - match: (\[)(\^)?(-)?
      captures:
        1: punctuation.definition.character-class.set.begin.lex
        2: keyword.operator.logical.not.lex
        3: constant.single.character.character-class.lex
      push:
        - meta_scope: meta.character-class.set.lex
        - match: \]
          scope: punctuation.definition.character-class.set.end.lex
          pop: 1
        - include: escapes
        - include: expressions
        - match: -(?!\])
          scope: punctuation.separator.range.dash.lex
        - match: .
          scope: constant.single.character.character-class.lex

  # Escape sequences use in regular expressions
  escapes:
    - match: \\[0-7]{3}
      scope: constant.character.escape.codepoint.octal.lex
    - match: \\[xX][A-Fa-f0-9]{2}
      scope: constant.character.escape.codepoint.hexadecimal.hex.lex
    - match: \\.
      scope: constant.character.escape.lex

  # Definition expansion
  expansion:
    - match: (\{)([^{}\s]+)(\})
      scope: meta.expansion.lex
      captures:
        1: punctuation.definition.expansion.bracket.curly.begin.lex
        2: variable.parameter.reference.lex
        3: punctuation.definition.expansion.bracket.curly.end.lex

  # Character class "expression" (POSIX character class)
  expressions:
    - match: |-
        (?x:
          (\[:)
          (alnum|alpha|blank|cntrl|digit|graph
          |lower|print|punct|space|upper|xdigit)
          (:\])
        )
      scope: constant.language.posix.$2-char.character-class.lex
      captures:
        1: punctuation.definition.character-class.set.begin.lex
        2: support.constant.posix-class.lex
        3: punctuation.definition.character-class.set.end.lex

  # Lookahead, or something like it
  lookahead:
    - match: \/
      scope: keyword.operator.logical.and.lookahead.lex

  # Quantifier
  quantifier:
    - match: '[\*\+\?]'
      scope: keyword.operator.quantifier.lex

  # Quantifier (specific range: {2,4}, {2,}, {,4}...)
  quantifier-range:
    - match: (\{)(?:([0-9]+)(?:(,)([0-9]*))?|(,)([0-9]+))(\})
      scope: keyword.operator.quantifier.specific.lex
      captures:
        1: punctuation.definition.quantifier.bracket.curly.begin.lex
        2: keyword.operator.quantifier.min.lex
        3: punctuation.declimiter.comma.lex
        4: keyword.operator.quantifier.max.lex
        5: punctuation.declimiter.comma.lex
        6: keyword.operator.quantifier.max.lex
        7: punctuation.definition.quantifier.bracket.curly.end.lex

  # Start condition
  start-condition:
    - match: <
      scope: punctuation.definition.angle.bracket.begin.lex
      push:
        - meta_scope: meta.start-condition.lex
        - match: '>|(?=$)'
          scope: punctuation.definition.angle.bracket.end.lex
          pop: 1
        - match: \*
          scope: keyword.operator.wildcard.condition.lex
        - match: ','
          scope: punctuation.delimiter.separator.comma.lex
        - match: '[^<>*,\s]+'
          scope: constant.language.condition.name.lex

  # "Double-quoted" string literal
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.lex
      push:
        - meta_scope: string.quoted.double.lex
        - match: '"'
          scope: punctuation.definition.string.end.lex
          pop: 1
        - include: escapes

  # Subpattern: (xyz)
  subpattern:
    - match: \(
      scope: punctuation.definition.group.begin.lex
      push:
        - meta_scope: meta.group.regexp
        - match: \)
          scope: punctuation.definition.group.end.lex
          pop: 1
        - include: main

  # WIldcard
  wildcard:
    - match: \.
      scope: constant.character.wildcard.dot.match.any.lex
